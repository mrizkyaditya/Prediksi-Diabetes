# -*- coding: utf-8 -*-
"""Predict_Diabetes

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wcZZIlwGa4qJr22muqA628f-WtHsdtuN
"""

!pipreqs "/content/drive/MyDrive/Dataset_Diabetes" --force

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import os
import platform
import re
import matplotlib.pyplot as plt
from IPython.display import clear_output
from sklearn.preprocessing import LabelEncoder
from tabulate import tabulate
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
from datetime import datetime
from zoneinfo import ZoneInfo

bmx = pd.read_csv("drive/MyDrive/Dataset_Diabetes/P_BMX.csv")
demo = pd.read_csv("drive/MyDrive/Dataset_Diabetes/P_DEMO.csv")
diq = pd.read_csv("drive/MyDrive/Dataset_Diabetes/P_DIQ.csv")
ghb = pd.read_csv("drive/MyDrive/Dataset_Diabetes/P_GHB.csv")
glu = pd.read_csv("drive/MyDrive/Dataset_Diabetes/P_GLU.csv")
ins = pd.read_csv("drive/MyDrive/Dataset_Diabetes/P_INS.csv")

print(bmx.columns)
print(demo.columns)
print(diq.columns)
print(ghb.columns)
print(glu.columns)
print(ins.columns)

"""Mengubah Nama Kolom"""

bmx.rename(columns={
    'SEQN': 'Nomor Responden',
    'BMXWT': 'Berat_Badan (kg)',
    'BMXHT': 'Tinggi_Badan (cm)',
    'BMXBMI': 'Indeks_Massa_Tubuh (BMI)',
    'BMXWAIST': 'Lingkar_Pinggang (cm)',
    'BMXHIP': 'Lingkar_Pinggul (cm)'
}, inplace=True)

columns_to_drop_bmx = ['Unnamed: 0', 'BMIWT', 'BMXRECUM', 'BMIRECUM', 'BMDSTATS',
                        'BMXHEAD', 'BMIHEAD', 'BMXLEG', 'BMILEG', 'BMIHT', 'BMI', 'BMDBMIC',
                        'BMXARML', 'BMIARML', 'BMXARMC', 'BMIARMC', 'BMIWAIST', 'BMIHIP']
bmx.drop(columns=columns_to_drop_bmx, inplace=True, errors='ignore')

demo.rename(columns={
    'SEQN': 'Nomor Responden',
    'RIAGENDR': 'Jenis_Kelamin',
    'RIDAGEYR': 'Usia (tahun)'
}, inplace=True)

columns_to_drop_demo = ['Unnamed: 0', 'SDDSRVYR', 'RIDSTATR', 'RIDRETH1', 'RIDAGEMN', 'RIDRETH3',
                        'RIDEXMON', 'INDFMPIR',  'DMDBORN4', 'DMDYRUSZ', 'DMDMARTZ', 'RIDEXPRG',
                        'SIALANG', 'SIAPROXY', 'SIAINTRP', 'FIALANG', 'FIAPROXY', 'FIAINTRP',
                        'MIALANG', 'MIAPROXY', 'MIAINTRP', 'DMDEDUC2', 'AIALANGA', 'WTINTPRP',
                        'WTMECPRP', 'SDMVPSU', 'SDMVSTRA']
demo.drop(columns=columns_to_drop_demo, inplace=True, errors='ignore')

diq.rename(columns={
    'SEQN': 'Nomor Responden',
    'DIQ010': 'Pernah_Diagnosis'
}, inplace=True)

columns_to_drop_diq = ['Unnamed: 0', 'DID040', 'DIQ180', 'DID060', 'DIQ060U', 'DIQ070',
                        'DIQ230', 'DIQ050', 'DIQ160', 'DIQ240', 'DID250', 'DID260', 'DIQ260U', 'DIQ275',
                        'DIQ280', 'DIQ291', 'DIQ300S', 'DIQ300D', 'DID310S', 'DID310D',
                        'DID320', 'DID330', 'DID341', 'DID350', 'DIQ350U', 'DIQ360', 'DIQ080']
diq.drop(columns=columns_to_drop_diq, inplace=True, errors='ignore')

ghb.rename(columns={
    'SEQN': 'Nomor Responden',
    'LBXGH': 'Kadar_HbA1c (<2-3 Bulan) (%)'
}, inplace=True)

ghb.drop(columns=['Unnamed: 0'], inplace=True, errors='ignore')

glu.rename(columns={
    'SEQN': 'Nomor Responden',
    'LBXGLU': 'Kadar_Glukosa (mg/dL)'
}, inplace=True)

columns_to_drop_glu = ['Unnamed: 0', 'WTSAFPRP', 'LBDGLUSI']
glu.drop(columns=columns_to_drop_glu, inplace=True, errors='ignore')

ins.rename(columns={
    'SEQN': 'Nomor Responden',
    'LBXIN': 'Kadar_Insulin (uU/mL)'
}, inplace=True)

columns_to_drop_ins = ['Unnamed: 0', 'WTSAFPRP', 'LBDINSI', 'LBDINLC']
ins.drop(columns=columns_to_drop_ins, inplace=True, errors='ignore')

print(bmx.columns)
print(demo.columns)
print(diq.columns)
print(ghb.columns)
print(glu.columns)
print(ins .columns)

df = demo.merge(bmx, on="Nomor Responden", how="left") \
         .merge(diq, on="Nomor Responden", how="left") \
         .merge(ghb, on="Nomor Responden", how="left") \
         .merge(glu, on="Nomor Responden", how="left") \
         .merge(ins, on="Nomor Responden", how="left")

print(df.head())

def kategori_diabetes(row):
    if (row['Kadar_HbA1c (<2-3 Bulan) (%)'] >= 6.5) or (row['Kadar_Glukosa (mg/dL)'] >= 126) or (row['Pernah_Diagnosis'] == 1):
        return "Diabetes"
    elif (5.7 <= row['Kadar_HbA1c (<2-3 Bulan) (%)'] < 6.5) or (100 <= row['Kadar_Glukosa (mg/dL)'] < 126):
        return "PraDiabetes"
    else:
        return "Tidak Diabetes"

df['Diabetes'] = df.apply(kategori_diabetes, axis=1)

features = ['Usia (tahun)', 'Jenis_Kelamin', 'Berat_Badan (kg)', 'Tinggi_Badan (cm)', 'Indeks_Massa_Tubuh (BMI)', 'Lingkar_Pinggang (cm)', 'Lingkar_Pinggul (cm)', 'Kadar_HbA1c (<2-3 Bulan) (%)', 'Kadar_Glukosa (mg/dL)', 'Kadar_Insulin (uU/mL)']
X = df[features].fillna(df[features].median())
y = df['Diabetes']

le = LabelEncoder()

features = ['Usia (tahun)', 'Jenis_Kelamin', 'Indeks_Massa_Tubuh (BMI)', 'Lingkar_Pinggang (cm)', 'Lingkar_Pinggul (cm)', 'Berat_Badan (kg)', 'Tinggi_Badan (cm)',
            'Kadar_HbA1c (<2-3 Bulan) (%)', 'Kadar_Glukosa (mg/dL)', 'Kadar_Insulin (uU/mL)']
X = X[features].fillna(X[features].median())

print(X.isna().sum())

print(X.head())

df['Jenis_Kelamin'] = df['Jenis_Kelamin'].map({1: "Laki-laki", 2: "Perempuan"})

print(df.head())

df_clean = df.copy()

df_clean['Pernah_Diagnosis'] = df_clean['Pernah_Diagnosis'].map({1: 'Ya', 2: 'Tidak'})

num_cols = ['Usia (tahun)', 'Berat_Badan (kg)', 'Tinggi_Badan (cm)',
            'Indeks_Massa_Tubuh (BMI)', 'Lingkar_Pinggang (cm)',
            'Lingkar_Pinggul (cm)', 'Kadar_HbA1c (<2-3 Bulan) (%)',
            'Kadar_Glukosa (mg/dL)', 'Kadar_Insulin (uU/mL)']

for col in num_cols:
    if col in df_clean.columns:
        df_clean[col] = df_clean[col].fillna(df_clean[col].median())

df_clean['Jenis_Kelamin'] = df_clean['Jenis_Kelamin'].replace({1:'Laki-laki', 2:'Perempuan'})

df_clean['Diabetes'] = df_clean['Diabetes'].fillna('Tidak Diabetes')

print(df_clean.head())

label_encoders = {}
for col in ['Jenis_Kelamin']:
    le = LabelEncoder()
    df_clean[col + '_encoded'] = le.fit_transform(df_clean[col])
    label_encoders[col] = le

features = ['Usia (tahun)', 'Indeks_Massa_Tubuh (BMI)', 'Berat_Badan (kg)', 'Tinggi_Badan (cm)',
            'Kadar_HbA1c (<2-3 Bulan) (%)', 'Kadar_Glukosa (mg/dL)', 'Kadar_Insulin (uU/mL)',
            'Jenis_Kelamin_encoded']

X = df_clean[features]
y = df_clean['Diabetes']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42
)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print("Akurasi:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

def clear_screen():
    try:
        clear_output(wait=True)
    except:
        if platform.system() == "Windows":
            os.system("cls")
        else:
            os.system("clear")
def kategori_diabetes_input(hba1c, glukosa, pernah_diagnosis=0):
    if (hba1c >= 6.5) or (glukosa >= 126) or (pernah_diagnosis == 1):
        return "Diabetes"
    elif (5.7 <= hba1c < 6.5) or (100 <= glukosa < 126):
        return "PraDiabetes"
    else:
        return "Tidak Diabetes"

pasien_baru_list = []

from datetime import datetime, timezone
import os

now = datetime.now(ZoneInfo("Asia/Jakarta"))
bulan = now.strftime("%B")
tahun = now.strftime("%Y")
folder = "drive/MyDrive/Dataset_Diabetes"
os.makedirs(folder, exist_ok=True)
file_path = f"{folder}/Dataset_Pasien_Diabetes_{bulan}_{tahun}_Simulasi.csv"

if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
    try:
        data_lama = pd.read_csv(file_path)
    except Exception:
        print("File CSV rusak, membuat ulang dari awal.")
        data_lama = pd.DataFrame()
else:
    data_lama = pd.DataFrame()

while True:
    clear_screen()
    print("\n === Masukkan Data Pasien Baru ===")
    nama = input("Nama Pasien: ").strip()
    usia = int(input("Usia (tahun): "))
    berat = float(input("Berat_Badan (kg): "))
    tinggi = float(input("Tinggi_Badan (cm): "))
    bmi = float(input("BMI: "))
    hba1c = float(input("Kadar_HbA1c (<2-3 Bulan) (%): "))
    gula = float(input("Kadar_Glukosa (mg/dL): "))
    insulin = float(input("Kadar_Insulin (uU/mL): "))

    print("\nPilih Jenis Kelamin:")
    jk_table = [
        ["1", "Laki-laki"],
        ["2", "Perempuan"]
    ]
    print(tabulate(jk_table, headers=["No", "Jenis Kelamin"], tablefmt="fancy_grid", colalign=("center", "center")))
    jk_pilihan = input("Masukkan nomor pilihan (1/2): ").strip()

    if jk_pilihan == "1":
        jenis_kelamin = "Laki-laki"
    elif jk_pilihan == "2":
        jenis_kelamin = "Perempuan"
    else:
        print("Pilihan tidak valid, default = Laki-laki")
        jenis_kelamin = "Laki-laki"


    jk_encoded = label_encoders['Jenis_Kelamin'].transform([jenis_kelamin])[0]

    encoded_features = pd.DataFrame([{
        'Usia (tahun)': usia,
        'Berat_Badan (kg)': berat,
        'Tinggi_Badan (cm)': tinggi,
        'Indeks_Massa_Tubuh (BMI)': bmi,
        'Kadar_HbA1c (<2-3 Bulan) (%)': hba1c,
        'Kadar_Glukosa (mg/dL)': gula,
        'Kadar_Insulin (uU/mL)': insulin,
        'Jenis_Kelamin_encoded': jk_encoded
    }])
    label = kategori_diabetes_input(hba1c, gula)
    tanggal_input = datetime.now(ZoneInfo("Asia/Jakarta")).strftime("%d/%m/%Y")
    pasien_baru = pd.DataFrame([{
        'Nama_Pasien': nama,
        'Usia (tahun)': usia,
        'Berat_Badan (kg)': berat,
        'Tinggi_Badan (cm)': tinggi,
        'Indeks_Massa_Tubuh (BMI)': bmi,
        'Kadar_HbA1c (<2-3 Bulan) (%)': hba1c,
        'Kadar_Glukosa (mg/dL)': gula,
        'Kadar_Insulin (uU/mL)': insulin,
        'Jenis_Kelamin': jenis_kelamin,
        'Tanggal_Input': tanggal_input,
        'Prediksi Diabetes' : label
    }])

    if not data_lama.empty:
        data_lama = pd.concat([data_lama, pasien_baru], ignore_index=True)
    else:
        data_lama = pasien_baru

    data_lama = data_lama.sort_values(by="Nama_Pasien", ascending=True).reset_index(drop=True)

    data_lama.to_csv(file_path, index=False)

    print("\n===DATA PASIEN===")

    info_table = [
        ["Nama Pasien", nama],
        ["Hasil Prediksi", label],
        ["Waktu Input", tanggal_input],
        ["File Dataset", file_path]
    ]
    print(tabulate(info_table, tablefmt="fancy_grid", colalign=("left", "left")))

    print("\nData pasien berhasil disimpan!\n")

    lagi = input("Apakah ada pasien lain? (y/n): ").lower()
    if lagi == 'y':
        continue
    else:
        break

file_paths = [
    'drive/MyDrive/Dataset_Diabetes/Dataset_Pasien_Diabetes_Juli_2025_Simulasi.csv',
    'drive/MyDrive/Dataset_Diabetes/Dataset_Pasien_Diabetes_Agustus_2025_Simulasi.csv',
    'drive/MyDrive/Dataset_Diabetes/Dataset_Pasien_Diabetes_September_2025_Simulasi.csv'
]

path_october = 'drive/MyDrive/Dataset_Diabetes/Dataset_Pasien_Diabetes_October_2025_Simulasi.csv'

df_list = [pd.read_csv(path, sep=';') for path in file_paths]

df_jul_sep = pd.concat(df_list, ignore_index=True)

df_october = pd.read_csv(path_october)

df_all = pd.concat([df_jul_sep, df_october], ignore_index=True)

df_juli = pd.read_csv(
    'drive/MyDrive/Dataset_Diabetes/Dataset_Pasien_Diabetes_Juli_2025_Simulasi.csv',
    sep=';', engine='python'
)
display(df_juli.head(10))

df_agustus = pd.read_csv(
    'drive/MyDrive/Dataset_Diabetes/Dataset_Pasien_Diabetes_Agustus_2025_Simulasi.csv',
    sep=';', engine='python'
)
display(df_agustus.head(10))

df_september = pd.read_csv(
    'drive/MyDrive/Dataset_Diabetes/Dataset_Pasien_Diabetes_September_2025_Simulasi.csv',
    sep=';', engine='python'
)
display(df_september.head(10))

df_oktober = pd.read_csv(
    'drive/MyDrive/Dataset_Diabetes/Dataset_Pasien_Diabetes_October_2025_Simulasi.csv',
    engine='python'
)
display(df_oktober.head(10))

file_paths = {
    "Juli": 'drive/MyDrive/Dataset_Diabetes/Dataset_Pasien_Diabetes_Juli_2025_Simulasi.csv',
    "Agustus": 'drive/MyDrive/Dataset_Diabetes/Dataset_Pasien_Diabetes_Agustus_2025_Simulasi.csv',
    "September": 'drive/MyDrive/Dataset_Diabetes/Dataset_Pasien_Diabetes_September_2025_Simulasi.csv',
    "October": 'drive/MyDrive/Dataset_Diabetes/Dataset_Pasien_Diabetes_October_2025_Simulasi.csv'
}

dataframes = {}
for bulan, path in file_paths.items():
    if "October" in bulan:
        df = pd.read_csv(path)
    else:
        df = pd.read_csv(path, sep=';')
    df["Bulan"] = bulan
    dataframes[bulan] = df

df_all = pd.concat(dataframes.values(), ignore_index=True)

diabetes_per_bulan = df_all[df_all["Prediksi Diabetes"] == "Diabetes"].groupby("Bulan").size()

plt.figure(figsize=(8, 5))
colors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99']
bars = plt.bar(diabetes_per_bulan.index, diabetes_per_bulan.values, color=colors, edgecolor='black')
plt.title("Jumlah Kasus Diabetes per Bulan (2025)", fontsize=14, fontweight='bold')
plt.xlabel("Bulan")
plt.ylabel("Jumlah Pasien Diabetes")

for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval + 0.5, int(yval), ha='center', va='bottom', fontsize=10)

plt.show()

rata_usia = df_all[df_all["Prediksi Diabetes"] == "Diabetes"].groupby("Bulan")["Usia (tahun)"].mean()

plt.figure(figsize=(8, 5))
bars2 = plt.bar(rata_usia.index, rata_usia.values, color=['#4C72B0', '#55A868', '#C44E52', '#8172B2'], edgecolor='black')
plt.title("Rata-rata Usia Penderita Diabetes per Bulan (2025)", fontsize=14, fontweight='bold')
plt.xlabel("Bulan")
plt.ylabel("Usia Rata-rata (tahun)")

for bar in bars2:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval + 0.3, f"{yval:.1f}", ha='center', va='bottom', fontsize=10)

plt.show()

max_glukosa = df_all["Kadar_Glukosa (mg/dL)"].max()
pasien_glukosa_tinggi = df_all[df_all["Kadar_Glukosa (mg/dL)"] == max_glukosa]

print("Kadar Glukosa Tertinggi:")
display(pasien_glukosa_tinggi[["Nama_Pasien", "Kadar_Glukosa (mg/dL)", "Bulan", "Prediksi Diabetes"]])

plt.figure(figsize=(8, 4))
plt.hist(df_all["Kadar_Glukosa (mg/dL)"], bins=20, color='#66C2A5', edgecolor='black')
plt.axvline(max_glukosa, color='red', linestyle='--', linewidth=2, label=f'Tertinggi: {max_glukosa} mg/dL')
plt.title("Distribusi Kadar Glukosa Pasien (Semua Bulan)", fontsize=14, fontweight='bold')
plt.xlabel("Kadar Glukosa (mg/dL)")
plt.ylabel("Jumlah Pasien")
plt.legend()
plt.show()